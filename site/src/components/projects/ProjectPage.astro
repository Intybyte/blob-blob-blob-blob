---
import Layout from '~/layouts/Layout.astro';
import ReleaseChannels from '~/components/projects/ReleaseChannels';
import Project from '~/components/projects/Project';
import BuildList from '~/components/projects/builds/BuildList.astro';
import { getProject, getProjectBuilds, type ProjectBuilds } from '~/api/api';

const url = new URL(Astro.request.url);

let { projectName, releaseChannel } = Astro.props as { projectName: string; releaseChannel?: string };

let page = 1;
if (url.searchParams.has('page')) {
	page = parseInt(url.searchParams.get('page') ?? '1');
}

let project: ProjectResponse | null;

const res = await getProject(Astro.locals, projectName);
if (res.success) {
	project = res.data;
} else {
	console.error(`Failed to fetch project: ${res.error}`);
	project = null;
}

if (releaseChannel === undefined) {
	if (project?.defaultReleaseChannel !== undefined) {
		releaseChannel = project.defaultReleaseChannel.name;
	} else {
		// Worst case, fall back to Dev
		releaseChannel = 'Dev';
	}
}

let builds: ProjectBuilds = {};
let pagination: Pagination | undefined;
if (project !== null) {
	const buildsRes = await getProjectBuilds(Astro.locals, project.name, releaseChannel, page);
	if (buildsRes.success && buildsRes.data !== null) {
		builds = buildsRes.data;
		if (buildsRes.pagination !== undefined) {
			pagination = buildsRes.pagination;
		}
	}
}

const releaseChannels = Object.keys(builds);
const buildsForChannel = builds[releaseChannel] ?? [];
---

<Layout>
	<main class='w-4/5 m-auto'>
		{!res.success || project === null ? <h2>Project not found</h2> :
			<Project project={project} />

			<ReleaseChannels
				project={project}
				selected={releaseChannel}
				defaultReleaseChannel={project.defaultReleaseChannel?.name ?? 'Dev'}
				releaseChannels={releaseChannels ?? []}
			/>

			<BuildList project={project} builds={buildsForChannel} releaseChannel={releaseChannel} pagination={pagination} />
		}
	</main>
</Layout>
